package com.AnkitIndia.jwtauthentication.repository;

import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Tuple;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import com.AnkitIndia.jwtauthentication.model.Dailyproduction;
import com.AnkitIndia.jwtauthentication.model.Pur_Bill;
import com.AnkitIndia.jwtauthentication.model.Pur_Order;
import com.AnkitIndia.jwtauthentication.model.Pur_Order_app_chgs;
import com.AnkitIndia.jwtauthentication.model.Pur_good_receipt;

import org.springframework.data.repository.query.Param;

public interface Pur_BillRepository extends JpaRepository<Pur_Bill, Long> {
	
	@Query("select COUNT(id) from Pur_Bill")
	String countId();
	
	//@Query("select COUNT(id) from Pur_Bill where bill_date =:orderdate and item_type =:itype and purchase_type =:ptype and purchase_subtype =:psubtype and modified_type = 'INSERTED'")
	@Query("select COUNT(id) from Pur_Bill where bill_date =:orderdate and item_type =:itype and purchase_type =:ptype and purchase_subtype =:psubtype")
	String countPBOrder(@Param("orderdate") String orderdate,@Param("itype") boolean itype,@Param("ptype") String ptype,@Param("psubtype") String psubtype);

	@Query( "select b from Pur_Bill b where b.modified_type = 'INSERTED' ORDER BY b.pur_bill_id DESC")
	List<Pur_Bill> findAllBills();
	
	@Query("select p from Pur_Bill p where p.pur_bill_id =:pbillid and p.company_id =:company and p.fin_year =:finyear and p.modified_type = 'INSERTED'")
	Pur_Bill getPurBillDetails(@Param("pbillid") String pbillid,@Param("company") String company,@Param("finyear") String finyear);
	
	@Query("select p from Pur_Bill p where p.modified_type = 'INSERTED' and p.payment_date BETWEEN DATE_FORMAT(STR_TO_DATE(:fromdate,'%d-%m-%Y'),'%Y-%m-%d') and DATE_FORMAT(STR_TO_DATE(:todate,'%d-%m-%Y'),'%Y-%m-%d') ") 
	List<Pur_Bill> getPaymentStatus(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query("select p from Pur_Bill p where p.supplier_name =:supplier and p.bill_date =:tdate and p.company_id =:company and p.fin_year =:finyear and p.modified_type = 'INSERTED'")
	List<Pur_Bill> getPurBillRtnApp(@Param("supplier") String supplier,@Param("tdate") String tdate,@Param("company") String company,@Param("finyear") String finyear);
	
	@Query( "select b from Pur_Bill b where b.id =:id")
	Pur_Bill findBillDetails(@Param("id") Long id);
	
	
	@Modifying(clearAutomatically = true)
    @Query("UPDATE Pur_good_receipt w SET w.grn_status ='Close' WHERE w.referance_id = :referance_id" )
    int grn_status_update(@Param("referance_id") String referance_id);
	
	@Query("select p from Pur_Order_app_chgs p where p.pur_orderid =:purchaseid and p.modified_type = 'INSERTED'")
	List<Pur_Order_app_chgs> getappcharges(@Param("purchaseid") String purchaseid);
	
	@Query("select p from Pur_Bill p where p.pur_bill_id =:pur_bill_id and p.modified_type = 'INSERTED'")
	Pur_Bill getPurBillNo(@Param("pur_bill_id") String pur_bill_id);
	
	@Modifying(clearAutomatically = true)
	@Query("UPDATE Pur_Bill p SET p.export=:export , p.response=:response WHERE p.id = :id" )
	int exportuomtally(@Param("id") long id,@Param("response") String response,@Param("export") int export);
	
	@Modifying(clearAutomatically = true)
	@Query("UPDATE Pur_Bill p SET p.export=0  WHERE p.id = :id" )
	int exportuomtallyundo(@Param("id") long id);
	
	@Query(value = "{call getSearchGRNData(:#{#tablename},:#{#party_name},:#{#order_no},:#{#order_date},:#{#purchase_type},:#{#customername},:#{#orderno},:#{#fromdate},:#{#todate},:#{#pur_type1},:#{#finyear})}", nativeQuery = true)
	List<Pur_Bill> getsearchdata(@Param("tablename") String tablename,@Param("party_name") String party_name,
			@Param("order_no") String order_no,@Param("order_date") String order_date, 
			@Param("purchase_type") String purchase_type,
			@Param("orderno") String orderno,@Param("fromdate") String fromdate,
			@Param("todate") String todate,@Param("customername") String customername,
			@Param("pur_type1") String pur_type1,
			@Param("finyear") String finyear);
			
	@Query(value = "{call getSearchGRNData(:#{#tablename},:#{#party_name},:#{#order_no},:#{#order_date},:#{#purchase_type},:#{#customername},:#{#orderno},:#{#fromdate},:#{#todate},:#{#pur_type1},:#{#finyear})}", nativeQuery = true)
	List<Map<String,Object>> getsearchdataFast(@Param("tablename") String tablename,@Param("party_name") String party_name,
			@Param("order_no") String order_no,@Param("order_date") String order_date, 
			@Param("purchase_type") String purchase_type,
			@Param("orderno") String orderno,@Param("fromdate") String fromdate,
			@Param("todate") String todate,@Param("customername") String customername,
			@Param("pur_type1") String pur_type1,
			@Param("finyear") String finyear);
	
	@Query(value= "select LENGTH(w.net_payable_party) from pur_bill w where w.pur_bill_id = :pur_bill_id and  w.modified_type = 'INSERTED'", nativeQuery=true )
	int getdoublelength(@Param("pur_bill_id") String pur_bill_id);
	
	@Query("select p from Pur_Bill p where p.modified_type = 'INSERTED' and p.bill_date=:currDate and p.fin_year=:finyear")
	List<Pur_Bill>  getPurBillNocurrentdate(@Param("currDate") String currDate,@Param("finyear") String finyear);
	
	//@Query(value ="SELECT pur_bill.bill_date,pur_bill.purchase_typename,pur_bill.pur_bill_no,pur_bill.adviceno,pur_bill.state,pur_bill.supplier,pur_bill_tax_info.gst,pur_bill.vehicleno,pur_bill.supp_ref_docno,pur_bill.supp_ref_doc_date,pur_bill.item_total,pur_bill.discount,pur_bill.net_amt,pur_bill.qc_deduction,pur_bill.amt_after_deduction,pur_bill.add_tax,pur_bill.post_tax_amt,pur_bill.other_charges,pur_bill.add1,pur_bill.add2,pur_bill.roundoff_amt,pur_bill.payable_party,pur_bill.already_paid,pur_bill.net_payable_party,pur_bill.remarks,pur_bill_item_details.adv_item_name,pur_bill_item_details.hsn_code,pur_bill_item_details.adv_packing_item_name,pur_bill_item_details.passed_packing_qty,pur_bill_item_details.passed_item_qty,pur_bill_item_details.passed_mat_weight,pur_bill_item_details.unit_rate,pur_bill_item_details.price_based_on,pur_bill_item_details.amount,pur_bill_item_details.discount_amount,pur_bill_item_details.net_amount,pur_bill_item_details.net_amt_after_qc,pur_bill_item_details.tax_rate,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) > 0),`pur_bill_item_details`.`tax_amt`,0) AS `Igst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Cgst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Sgst`,pur_bill_item_details.tax_amt,pur_bill_item_details.gross_amt,pur_bill_broker_details.broker_name FROM pur_bill INNER JOIN pur_bill_broker_details ON pur_bill.pur_bill_id = pur_bill_broker_details.pur_bill_id INNER JOIN pur_bill_item_details ON pur_bill_broker_details.pur_bill_id = pur_bill_item_details.pur_bill_id INNER JOIN pur_bill_tax_info ON pur_bill.pur_bill_id = pur_bill_tax_info.pur_bill_id WHERE pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate AND pur_bill.modified_type ='INSERTED' AND pur_bill_item_details.modified_type ='INSERTED' AND pur_bill_broker_details.modified_type ='INSERTED' AND pur_bill_tax_info.modified_type ='INSERTED'",nativeQuery=true)
	@Query(value ="SELECT pur_bill.bill_date,pur_bill.purchase_typename,pur_bill.pur_bill_no,pur_bill.adviceno,pur_bill.state,pur_bill.supplier,pur_bill_tax_info.gst,CASE WHEN (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') IS NULL THEN '' ELSE (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') END AS panno,pur_bill.vehicleno,pur_bill.supp_ref_docno,pur_bill.supp_ref_doc_date,pur_bill.item_total,pur_bill.discount,pur_bill.net_amt,pur_bill.qc_deduction,pur_bill.amt_after_deduction,pur_bill.add_tax,pur_bill.post_tax_amt,pur_bill.other_charges,pur_bill.add1,pur_bill.add2,pur_bill.roundoff_amt,pur_bill.payable_party,pur_bill.already_paid,pur_bill.net_payable_party,pur_bill.remarks,pur_bill_item_details.adv_item_name,pur_bill_item_details.hsn_code,pur_bill_item_details.adv_packing_item_name,pur_bill_item_details.passed_packing_qty,pur_bill_item_details.passed_item_qty,pur_bill_item_details.passed_mat_weight,pur_bill_item_details.unit_rate,pur_bill_item_details.price_based_on,pur_bill_item_details.amount,pur_bill_item_details.discount_amount,pur_bill_item_details.net_amount,pur_bill_item_details.net_amt_after_qc,pur_bill_item_details.tax_rate,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) > 0),`pur_bill_item_details`.`tax_amt`,0) AS `Igst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Cgst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Sgst`,pur_bill_item_details.tax_amt,pur_bill_item_details.gross_amt,pur_bill_broker_details.broker_name FROM pur_bill INNER JOIN pur_bill_broker_details ON pur_bill.pur_bill_id = pur_bill_broker_details.pur_bill_id INNER JOIN pur_bill_item_details ON pur_bill_broker_details.pur_bill_id = pur_bill_item_details.pur_bill_id INNER JOIN pur_bill_tax_info ON pur_bill.pur_bill_id = pur_bill_tax_info.pur_bill_id WHERE pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate AND pur_bill.modified_type ='INSERTED' AND pur_bill_item_details.modified_type ='INSERTED' AND pur_bill_broker_details.modified_type ='INSERTED' AND pur_bill_tax_info.modified_type ='INSERTED'",nativeQuery=true)
	List<Tuple> getPurBillNewReport(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value ="SELECT pur_bill.bill_date,pur_bill.purchase_typename,pur_bill.pur_bill_no,pur_bill.adviceno,pur_bill.state,pur_bill.supplier,pur_bill_tax_info.gst,CASE WHEN (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') IS NULL THEN '' ELSE (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') END AS panno,pur_bill.vehicleno,pur_bill.supp_ref_docno,pur_bill.supp_ref_doc_date,pur_bill.item_total,pur_bill.discount,pur_bill.net_amt,pur_bill.qc_deduction,pur_bill.amt_after_deduction,pur_bill.add_tax,pur_bill.post_tax_amt,pur_bill.other_charges,pur_bill.add1,pur_bill.add2,pur_bill.roundoff_amt,pur_bill.payable_party,pur_bill.already_paid,pur_bill.net_payable_party,pur_bill.remarks,pur_bill_item_details.adv_item_name,pur_bill_item_details.hsn_code,pur_bill_item_details.adv_packing_item_name,pur_bill_item_details.passed_packing_qty,pur_bill_item_details.passed_item_qty,pur_bill_item_details.passed_mat_weight,pur_bill_item_details.unit_rate,pur_bill_item_details.price_based_on,pur_bill_item_details.amount,pur_bill_item_details.discount_amount,pur_bill_item_details.net_amount,pur_bill_item_details.net_amt_after_qc,pur_bill_item_details.tax_rate,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) > 0),`pur_bill_item_details`.`tax_amt`,0) AS `Igst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Cgst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Sgst`,pur_bill_item_details.tax_amt,pur_bill_item_details.gross_amt,pur_bill_broker_details.broker_name FROM pur_bill INNER JOIN pur_bill_broker_details ON pur_bill.pur_bill_id = pur_bill_broker_details.pur_bill_id INNER JOIN pur_bill_item_details ON pur_bill_broker_details.pur_bill_id = pur_bill_item_details.pur_bill_id INNER JOIN pur_bill_tax_info ON pur_bill.pur_bill_id = pur_bill_tax_info.pur_bill_id WHERE pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate AND pur_bill.supplier_name=:supplier_name AND pur_bill.modified_type ='INSERTED' AND pur_bill_item_details.modified_type ='INSERTED' AND pur_bill_broker_details.modified_type ='INSERTED' AND pur_bill_tax_info.modified_type ='INSERTED'",nativeQuery=true)
	List<Tuple> getPurBillNewReportwithSupplier(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("supplier_name") String supplier_name);
	
	@Query(value ="SELECT pur_bill.bill_date,pur_bill.purchase_typename,pur_bill.pur_bill_no,pur_bill.adviceno,pur_bill.state,pur_bill.supplier,pur_bill_tax_info.gst,CASE WHEN (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') IS NULL THEN '' ELSE (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') END AS panno,pur_bill.vehicleno,pur_bill.supp_ref_docno,pur_bill.supp_ref_doc_date,pur_bill.item_total,pur_bill.discount,pur_bill.net_amt,pur_bill.qc_deduction,pur_bill.amt_after_deduction,pur_bill.add_tax,pur_bill.post_tax_amt,pur_bill.other_charges,pur_bill.add1,pur_bill.add2,pur_bill.roundoff_amt,pur_bill.payable_party,pur_bill.already_paid,pur_bill.net_payable_party,pur_bill.remarks,pur_bill_item_details.adv_item_name,pur_bill_item_details.hsn_code,pur_bill_item_details.adv_packing_item_name,pur_bill_item_details.passed_packing_qty,pur_bill_item_details.passed_item_qty,pur_bill_item_details.passed_mat_weight,pur_bill_item_details.unit_rate,pur_bill_item_details.price_based_on,pur_bill_item_details.amount,pur_bill_item_details.discount_amount,pur_bill_item_details.net_amount,pur_bill_item_details.net_amt_after_qc,pur_bill_item_details.tax_rate,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) > 0),`pur_bill_item_details`.`tax_amt`,0) AS `Igst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Cgst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Sgst`,pur_bill_item_details.tax_amt,pur_bill_item_details.gross_amt,pur_bill_broker_details.broker_name FROM pur_bill INNER JOIN pur_bill_broker_details ON pur_bill.pur_bill_id = pur_bill_broker_details.pur_bill_id INNER JOIN pur_bill_item_details ON pur_bill_broker_details.pur_bill_id = pur_bill_item_details.pur_bill_id INNER JOIN pur_bill_tax_info ON pur_bill.pur_bill_id = pur_bill_tax_info.pur_bill_id WHERE pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate AND pur_bill.purchase_type =:po_type AND pur_bill.modified_type ='INSERTED' AND pur_bill_item_details.modified_type ='INSERTED' AND pur_bill_broker_details.modified_type ='INSERTED' AND pur_bill_tax_info.modified_type ='INSERTED'",nativeQuery=true)
	List<Tuple> getPurBillNewReportwithPOtype(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("po_type") String po_type);

	@Query(value ="SELECT pur_bill.bill_date,pur_bill.purchase_typename,pur_bill.pur_bill_no,pur_bill.adviceno,pur_bill.state,pur_bill.supplier,pur_bill_tax_info.gst,CASE WHEN (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') IS NULL THEN '' ELSE (SELECT pan_no FROM supp_bussiness_partner_statutory WHERE bp_id=pur_bill.supplier_name AND modified_type='INSERTED') END AS panno,pur_bill.vehicleno,pur_bill.supp_ref_docno,pur_bill.supp_ref_doc_date,pur_bill.item_total,pur_bill.discount,pur_bill.net_amt,pur_bill.qc_deduction,pur_bill.amt_after_deduction,pur_bill.add_tax,pur_bill.post_tax_amt,pur_bill.other_charges,pur_bill.add1,pur_bill.add2,pur_bill.roundoff_amt,pur_bill.payable_party,pur_bill.already_paid,pur_bill.net_payable_party,pur_bill.remarks,pur_bill_item_details.adv_item_name,pur_bill_item_details.hsn_code,pur_bill_item_details.adv_packing_item_name,pur_bill_item_details.passed_packing_qty,pur_bill_item_details.passed_item_qty,pur_bill_item_details.passed_mat_weight,pur_bill_item_details.unit_rate,pur_bill_item_details.price_based_on,pur_bill_item_details.amount,pur_bill_item_details.discount_amount,pur_bill_item_details.net_amount,pur_bill_item_details.net_amt_after_qc,pur_bill_item_details.tax_rate,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) > 0),`pur_bill_item_details`.`tax_amt`,0) AS `Igst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Cgst`,IF((`isIgst`(`pur_bill_item_details`.`pur_bill_id`) < 1),TRUNCATE((`pur_bill_item_details`.`tax_amt` / 2),2),0) AS `Sgst`,pur_bill_item_details.tax_amt,pur_bill_item_details.gross_amt,pur_bill_broker_details.broker_name FROM pur_bill INNER JOIN pur_bill_broker_details ON pur_bill.pur_bill_id = pur_bill_broker_details.pur_bill_id INNER JOIN pur_bill_item_details ON pur_bill_broker_details.pur_bill_id = pur_bill_item_details.pur_bill_id INNER JOIN pur_bill_tax_info ON pur_bill.pur_bill_id = pur_bill_tax_info.pur_bill_id WHERE pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate AND pur_bill.purchase_type =:po_type AND pur_bill.supplier_name=:supplier_name AND pur_bill.modified_type ='INSERTED' AND pur_bill_item_details.modified_type ='INSERTED' AND pur_bill_broker_details.modified_type ='INSERTED' AND pur_bill_tax_info.modified_type ='INSERTED'",nativeQuery=true)
	List<Tuple> getPurBillNewReportwithPOtypeSupplier(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("po_type") String po_type,@Param("supplier_name") String supplier_name);
	
	@Query(value="SELECT  p.pur_bill_no AS pur_bill_no,p.item_total AS item_total,p.payable_amt AS payable_amt,p.roundoff_amt AS roundoff_amt,p.net_payable_party AS net_payable_party,SUM(d.passed_item_qty) AS itemqty ,SUM(d.passed_packing_qty) AS packingqty,SUM(d.passed_mat_weight) AS mtwt,p.supplier as supplier,p.vehicleno as vehicleno,p.supp_ref_docno as supp_ref_docno,p.remarks as remarks,p.bill_date as bill_date,p.supp_ref_doc_date as supp_ref_doc_date  FROM pur_bill p,pur_bill_item_details d WHERE p.modified_type='INSERTED' AND d.modified_type='INSERTED' AND p.bill_date>=:fromdate AND p.bill_date<=:todate AND p.supplier_name=:supplier_name AND  p.pur_bill_id = d.pur_bill_id GROUP BY p.pur_bill_id",nativeQuery=true)
	List<Map<String, Object>> getPurBillbalanceNewReportwithsupplier(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("supplier_name") String supplier_name);
	
	@Query(value="SELECT  p.pur_bill_no AS pur_bill_no,p.item_total AS item_total,p.payable_amt AS payable_amt,p.roundoff_amt AS roundoff_amt,p.net_payable_party AS net_payable_party,SUM(d.passed_item_qty) AS itemqty ,SUM(d.passed_packing_qty) AS packingqty,SUM(d.passed_mat_weight) AS mtwt,p.supplier as supplier,p.vehicleno as vehicleno,p.supp_ref_docno as supp_ref_docno,p.remarks as remarks,p.bill_date as bill_date,p.supp_ref_doc_date as supp_ref_doc_date  FROM pur_bill p,pur_bill_item_details d WHERE p.modified_type='INSERTED' AND d.modified_type='INSERTED' AND p.bill_date>=:fromdate AND p.bill_date<=:todate AND p.purchase_type =:po_type AND  p.pur_bill_id = d.pur_bill_id GROUP BY p.pur_bill_id",nativeQuery=true)
	List<Map<String, Object>> getPurBillbalanceNewReportwithPOtype(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("po_type") String po_type);

	@Query(value="SELECT  p.pur_bill_no AS pur_bill_no,p.item_total AS item_total,p.payable_amt AS payable_amt,p.roundoff_amt AS roundoff_amt,p.net_payable_party AS net_payable_party,SUM(d.passed_item_qty) AS itemqty ,SUM(d.passed_packing_qty) AS packingqty,SUM(d.passed_mat_weight) AS mtwt,p.supplier as supplier,p.vehicleno as vehicleno,p.supp_ref_docno as supp_ref_docno,p.remarks as remarks,p.bill_date as bill_date,p.supp_ref_doc_date as supp_ref_doc_date  FROM pur_bill p,pur_bill_item_details d WHERE p.modified_type='INSERTED' AND d.modified_type='INSERTED' AND p.bill_date>=:fromdate AND p.bill_date<=:todate AND p.supplier_name=:supplier_name AND p.purchase_type =:po_type AND p.pur_bill_id = d.pur_bill_id GROUP BY p.pur_bill_id",nativeQuery=true)
	List<Map<String, Object>> getPurBillbalanceNewReportwithsupplierPOtype(@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("supplier_name") String supplier_name,@Param("po_type") String po_type);

	@Query(value="SELECT  p.pur_bill_no AS pur_bill_no,p.item_total AS item_total,p.payable_amt AS payable_amt,p.roundoff_amt AS roundoff_amt,p.net_payable_party AS net_payable_party,SUM(d.passed_item_qty) AS itemqty ,SUM(d.passed_packing_qty) AS packingqty,SUM(d.passed_mat_weight) AS mtwt,p.supplier as supplier,p.vehicleno as vehicleno,p.supp_ref_docno as supp_ref_docno,p.remarks as remarks,p.bill_date as bill_date,p.supp_ref_doc_date as supp_ref_doc_date FROM pur_bill p,pur_bill_item_details d WHERE p.modified_type='INSERTED' AND d.modified_type='INSERTED' AND p.bill_date>=:fromdate AND p.bill_date<=:todate AND  p.pur_bill_id = d.pur_bill_id GROUP BY p.pur_bill_id",nativeQuery=true)
	List<Map<String, Object>> getPurBillbalanceNewReportwithoutsupplierPOtype(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value= "select * from pur_bill p where p.modified_type = 'INSERTED' and p.billstatus ='No' and p.return_apv_status ='No' and p.supplier_name =:supplier and p.business_unit =:bunit and p.company_id =:compid and p.fin_year =:finyear and p.bill_date <=:date",nativeQuery=true)
	List<Map<String, Object>> getReturnPurBillData(@Param("date") String date,@Param("bunit") String bunit,@Param("supplier") String supplier,@Param("finyear") String finyear,@Param("compid") String compid);
	
	@Modifying(clearAutomatically = true)
	@Query("UPDATE Pur_Bill p SET p.return_apv_status ='Yes' , p.purreturnid=:purreturnid WHERE p.referance_id = :referance_id" )
	int updatePurBillFullReturn(@Param("referance_id") String referance_id,@Param("purreturnid") String purreturnid);
	
	@Modifying(clearAutomatically = true)
	@Query("UPDATE Pur_Bill p SET p.return_apv_status ='Yes' , p.purreturnid=:purreturnid WHERE p.pur_bill_id = :referance_id" )
	int updatePurBillReturn(@Param("referance_id") String referance_id,@Param("purreturnid") String purreturnid);
	
	@Modifying(clearAutomatically = true)
	@Query("UPDATE Pur_Bill p SET p.return_apv_status ='No' , p.purreturnid='NA' WHERE p.purreturnid = :purreturnid" )
	int updateTimePurBillPurReturn(@Param("purreturnid") String purreturnid);
	
	//@Query(value= "SELECT IF(@lastid = p.pur_bill_no,'', @lastid \\:= p.pur_bill_no) AS pur_bill_no,p.bill_date AS billdate,b.broker_name AS brokername,p.supplier AS partyname,p.vehicleno AS vehicleno,i.adv_item_name AS itemname,i.adv_packing_item_name AS packing_item_name,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,i.price_based_on AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit and b.broker_code=:broker ORDER BY p.bill_date", nativeQuery=true)
	@Query(value= "SELECT SUBSTRING(p.pur_bill_no,17,20) AS pur_bill_no,p.id as id,p.pur_bill_id as pur_bill_id,p.referance_id as referance_id,p.bill_date AS billdate,p.vehicleno AS vehicleno,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,CASE WHEN i.price_based_on ='With Packing' THEN 'WP' WHEN i.price_based_on = 'Without Packing' THEN 'WOP' ELSE i.price_based_on END AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party,CASE WHEN (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) IS NULL THEN '' ELSE (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) END  AS allias_brokername,CASE WHEN (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) IS NULL THEN '' ELSE (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) END AS allias_partyname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) END AS item_alliasname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) END AS packing_alliasname FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit and b.broker_code IN (:broker) AND p.purchase_typename='RAW MATERIALS' ORDER BY p.bill_date", nativeQuery=true)
	List<Map<String, Object>> getPurchaseBillmiscreportbroker(@Param("business_unit") String business_unit,@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("broker") List<String> broker);
	
	//@Query(value= "SELECT IF(@lastid = p.pur_bill_no,'', @lastid \\:= p.pur_bill_no) AS pur_bill_no,p.bill_date AS billdate,b.broker_name AS brokername,p.supplier AS partyname,p.vehicleno AS vehicleno,i.adv_item_name AS itemname,i.adv_packing_item_name AS packing_item_name,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,i.price_based_on AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit and p.supplier_name =:supplier ORDER BY p.bill_date", nativeQuery=true)
	@Query(value= "SELECT SUBSTRING(p.pur_bill_no,17,20) AS pur_bill_no,p.id as id,p.pur_bill_id as pur_bill_id,p.referance_id as referance_id,p.bill_date AS billdate,p.vehicleno AS vehicleno,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,CASE WHEN i.price_based_on ='With Packing' THEN 'WP' WHEN i.price_based_on = 'Without Packing' THEN 'WOP' ELSE i.price_based_on END AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party,CASE WHEN (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) IS NULL THEN '' ELSE (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) END  AS allias_brokername,CASE WHEN (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) IS NULL THEN '' ELSE (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) END AS allias_partyname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) END AS item_alliasname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) END AS packing_alliasname FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit and p.supplier_name IN (:supplier) AND p.purchase_typename='RAW MATERIALS' ORDER BY p.bill_date", nativeQuery=true)
	List<Map<String, Object>> getPurchaseBillmiscreportparty(@Param("business_unit") String business_unit,@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("supplier") List<String> supplier);
	
	//@Query(value= "SELECT IF(@lastid = p.pur_bill_no,'', @lastid \\:= p.pur_bill_no) AS pur_bill_no,p.bill_date AS billdate,b.broker_name AS brokername,p.supplier AS partyname,p.vehicleno AS vehicleno,i.adv_item_name AS itemname,i.adv_packing_item_name AS packing_item_name,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,i.price_based_on AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit ORDER BY p.bill_date", nativeQuery=true)
	@Query(value= "SELECT SUBSTRING(p.pur_bill_no,17,20) AS pur_bill_no,p.id as id,p.pur_bill_id as pur_bill_id,p.bill_date AS billdate,p.referance_id as referance_id,p.vehicleno AS vehicleno,i.passed_item_qty AS grwt,i.passed_mat_weight AS netwt,i.unit_rate AS rate,CASE WHEN i.price_based_on ='With Packing' THEN 'WP' WHEN i.price_based_on = 'Without Packing' THEN 'WOP' ELSE i.price_based_on END AS unit,IF(@lastid2 = i.amount, '', @lastid2 \\:= i.amount) AS amount,p.discount AS discount,IF(@lastid3 = p.net_amt, '', @lastid3 \\:= p.net_amt) AS netamount,p.qc_deduction AS qc_deduction,p.claim1 AS claimanddeduction,IF(@lastid4 = p.amt_after_deduction, '', @lastid4 \\:= p.amt_after_deduction) AS amtafterdeduction,p.add_tax AS addtax,p.post_tax_amt AS post_tax_amt,p.payable_amt AS payable_amt,p.add1 AS addplus,p.add2 AS addminus,p.roundoff_amt AS roundoff_amt,IF(@lastid5 = p.payable_party, '', @lastid5 \\:= p.payable_party) AS payable_party,p.already_paid AS already_paid,IF(@lastid6 = p.net_payable_party, '', @lastid6 \\:= p.net_payable_party) AS net_payable_party,CASE WHEN (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) IS NULL THEN '' ELSE (SELECT  alt_name FROM broker_master WHERE broker_id=b.broker_code) END  AS allias_brokername,CASE WHEN (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) IS NULL THEN '' ELSE (SELECT alt_name FROM supp_bussiness_partner WHERE bp_id= p.supplier_name) END AS allias_partyname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_item_code) END AS item_alliasname,CASE WHEN (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) IS NULL THEN '' ELSE (SELECT alt_name FROM item_master WHERE item_id=i.adv_packing_item) END AS packing_alliasname FROM pur_bill p,pur_bill_broker_details b,pur_bill_item_details i WHERE p.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.modified_type=i.modified_type AND p.pur_bill_id =b.pur_bill_id AND i.pur_bill_id = p.pur_bill_id AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit AND p.purchase_typename='RAW MATERIALS' ORDER BY p.bill_date", nativeQuery=true)
	List<Map<String, Object>> getPurchaseBillmiscreportall(@Param("business_unit") String business_unit,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value= "SELECT DISTINCT p.supplier_name AS supplier_name,p.supplier AS supplier FROM pur_bill p WHERE p.modified_type='INSERTED' AND p.company_id=:company AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit", nativeQuery=true)
	List<Map<String, Object>> purchaseBillSupplierNamesList(@Param("company") String company,@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("business_unit") String business_unit);
	
	@Query(value= "SELECT DISTINCT b.broker_name AS broker_name,b.broker_code AS broker_code FROM pur_bill p,pur_bill_broker_details b WHERE p.modified_type='INSERTED' AND b.modified_type='INSERTED' AND p.modified_type=b.modified_type AND p.pur_bill_id =b.pur_bill_id AND p.company_id=:company AND p.bill_date>=:fromdate AND p.bill_date<=:todate and p.business_unit=:business_unit AND b.broker_code IS NOT NULL", nativeQuery=true)
	List<Map<String, Object>> purchaseBillBrokerNamesList(@Param("company") String company,@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("business_unit") String business_unit);

	@Query(value= "SELECT a.purbillno AS pur_bill_no,a.billdate AS bill_date,a.vehicleno AS vehicleno,c.pur_order_no AS ponumber,c.ord_date AS podate,c.gst_no AS gstn,a.supplier AS supplier,d.add1 AS address FROM pur_bill a,wm_unload_advice b,pur_order c,supp_bussiness_partner_address d WHERE a.adviceno=b.unadviceno AND b.pur_orderid = c.pur_orderid AND a.supplier_name=d.bp_id AND a.modified_type='INSERTED' AND b.modified_type='INSERTED' AND c.modified_type='INSERTED' AND a.pur_bill_id=:pbid", nativeQuery=true)
	List<Map<String, Object>> getpurbillprintupperdata(@Param("pbid") String pbid);

	@Query(value="SELECT pur_bill.bill_date AS billdate,pur_bill.adviceno AS Adviceno,pur_bill.pur_bill_no AS PurchaseBillno, pur_bill.supplier AS SupplierName,pur_bill.vehicleno AS Vehicleno, pur_bill_item_details.adv_item_name AS itemname,pur_bill_item_details.adv_packing_item_name AS packingname, pur_bill_item_details.passed_item_qty AS itemqty, pur_bill_item_details.passed_item_uom AS itemuom,pur_bill_item_details.passed_packing_qty AS packingqty, pur_bill_item_details.passed_packing_uom AS packinguom, pur_bill_item_details.passed_mat_weight AS matwt,pur_bill_item_details.unit_rate AS rate, pur_bill_item_details.price_based_on AS price_based_on, pur_bill_item_details.amount AS amount ,pur_bill_item_details.discount AS discount, pur_bill_item_details.discount_basedon AS discount_basedon, pur_bill_item_details.discount_amount AS discount_amount,pur_bill_item_details.net_amount AS net_amount, pur_bill_item_details.qc_deduction AS qc_deduction,pur_bill_item_details.net_amt_after_qc AS net_amt_after_qc, pur_bill_item_details.tax_code AS tax_code, pur_bill_item_details.tax_rate AS tax_rate,pur_bill_item_details.tax_amt AS tax_amt, pur_bill_item_details.gross_amt, pur_bill_item_details.warehouse,pur_bill_item_details.stack, pur_bill.item_total AS item_total, pur_bill.discount AS billdiscount, pur_bill.net_amt AS net_amt,pur_bill.qc_deduction AS billqc_deduction, pur_bill.claim1 AS claimanddeduction, pur_bill.amt_after_deduction AS amt_after_deduction,pur_bill.add_tax AS add_tax, pur_bill.post_tax_amt AS post_tax_amt,pur_bill.payable_amt AS payable_amt, pur_bill.add1 AS addplus,pur_bill.add2 AS addminus,pur_bill.roundoff_amt AS roundoff_amt, pur_bill.payable_party AS payable_party,pur_bill.already_paid AS already_paid, pur_bill.net_payable_party AS net_payable_party FROM  pur_bill_item_details INNER JOIN pur_bill ON pur_bill.pur_bill_id = pur_bill_item_details.pur_bill_id WHERE pur_bill.modified_type='INSERTED' AND pur_bill.modified_type=pur_bill_item_details.modified_type AND pur_bill.bill_date>=:fromdate AND pur_bill.bill_date<=:todate",nativeQuery=true)
	List<Map<String,Object>> PurBillReport(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	
	@Query(value="SELECT sales_invoice.invoice_type_name AS invoice_type_name,sales_invoice.businessunitname AS businessunitname,sales_invoice.invoice_no AS invoice_no,sales_invoice.adviceno AS adviceno, sales_invoice.invoice_date AS invoice_date, sales_invoice.state AS state,sales_invoice.partyname AS partyname,sales_invoice_tax_info.gstno AS gstno,sales_invoice_broker_dtls.broker_name AS broker_name,sales_invoice.challan AS challan,sales_invoice.e_invoice_no AS e_invoice_no,sales_invoice.salesorderno AS salesorderno, sales_invoice.salesorderdate AS salesorderdate, sales_invoice.refchallanno AS refchallanno,sales_invoice.refchallandate AS refchallandate,sales_invoice_item_dtls.item_name AS item_name,sales_invoice_item_dtls.item_groupname AS item_groupname,sales_invoice_item_dtls.packing_name AS packing_name,sales_invoice_item_dtls.hsn_code AS hsn_code,sales_invoice_item_dtls.squantity AS squantity,sales_invoice_item_dtls.suom AS suom,sales_invoice_item_dtls.quantity AS quantity,sales_invoice_item_dtls.uom AS uom,sales_invoice_item_dtls.mat_wt AS mat_wt,sales_invoice_item_dtls.price AS price,sales_invoice_item_dtls.price_based_on AS price_based_on,sales_invoice_item_dtls.amount AS amount,sales_invoice_item_dtls.discount_rate AS discount_rate,sales_invoice_item_dtls.discount_type AS discount_type,sales_invoice_item_dtls.discount_amt AS discount_amt,sales_invoice_item_dtls.tax_codename AS tax_codename,sales_invoice_item_dtls.tax_rate AS tax_rate,saletaxsum.Cgst AS Cgst,saletaxsum.Sgst AS Sgst,saletaxsum.Igst AS Igst,sales_invoice_item_dtls.tax_amt AS tax_amt,sales_invoice_item_dtls.total_amt AS total_amt,sales_invoice_trans_dtls.vehicleno AS vehicleno,sales_invoice.roundoff_amt AS roundoff_amt,sales_invoice.payable_amt AS payable_amt FROM sales_invoice_item_dtls INNER JOIN sales_invoice ON sales_invoice_item_dtls.invoice_id = sales_invoice.invoice_id  INNER JOIN sales_invoice_tax_info ON sales_invoice.invoice_id = sales_invoice_tax_info.invoice_id INNER JOIN saletaxsum ON sales_invoice_tax_info.invoice_id = saletaxsum.invoice_id  INNER JOIN sales_invoice_broker_dtls ON saletaxsum.invoice_id = sales_invoice_broker_dtls.invoice_id  INNER JOIN sales_invoice_trans_dtls ON sales_invoice_broker_dtls.invoice_id = sales_invoice_trans_dtls.invoice_id   WHERE sales_invoice.invoice_date>=:fromdate AND sales_invoice.invoice_date<=:todate AND sales_invoice.modified_type='INSERTED' AND sales_invoice_item_dtls.modified_type='INSERTED' AND sales_invoice_broker_dtls.modified_type='INSERTED'  GROUP BY sales_invoice_item_dtls.item_code,sales_invoice_item_dtls.invoice_id",nativeQuery=true)
	List<Tuple>getsaleinvoicereports(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT sales_credit_note.creditnoteno AS Credit_Note_No,sales_credit_note.creditnotedate AS Credit_Note_Date,sales_credit_note.invoice_typename AS Invoice_Type,sales_credit_note.partyname AS Party_Name,sales_credit_note_tax_info.gstno AS GSTN,sales_credit_note.challan AS Challan,sales_credit_note.refchallanno AS Ref_Challan_No,sales_credit_note.refchallandate AS Ref_Challan_Date,sales_credit_note.salesorderno AS Sales_Return_Note_No,sales_credit_note.salesorderdate AS Sales_Return_Note_Date,CASE WHEN (SELECT group_name FROM item_group_master WHERE item_group_id=sales_credit_note_item_dtls.item_group AND modified_type='INSERTED') IS NULL THEN 'NA' ELSE (SELECT group_name FROM item_group_master WHERE item_group_id=sales_credit_note_item_dtls.item_group AND modified_type='INSERTED') END  AS Item_Group,sales_credit_note_item_dtls.item_name AS Item_Name,sales_credit_note_item_dtls.packing_name AS Packing_Item,sales_credit_note_item_dtls.hsn_code AS HSN_Code,sales_credit_note_item_dtls.squantity AS Packing_Qty,sales_credit_note_item_dtls.suom AS Packing_UOM,sales_credit_note_item_dtls.quantity AS Item_Qty,sales_credit_note_item_dtls.uom AS Item_UOM,sales_credit_note_item_dtls.mat_wt AS Mat_Wt,sales_credit_note_item_dtls.price AS Price,sales_credit_note_item_dtls.price_based_on AS Price_Based_On,sales_credit_note_item_dtls.amount AS Amount,sales_credit_note_item_dtls.discount_amt AS Discount_Amt,CASE WHEN (SELECT tax_name FROM tax_code_details WHERE tax_id=sales_credit_note_item_dtls.tax_code AND modified_type='INSERTED') IS NULL THEN 'NA' ELSE (SELECT tax_name FROM tax_code_details WHERE tax_id=sales_credit_note_item_dtls.tax_code AND modified_type='INSERTED') END  AS Tax_Code,sales_credit_note_item_dtls.tax_rate AS Tax_Rate,sales_credit_note_item_dtls.tax_amt AS Tax_Amt,sales_credit_note_item_dtls.total_amt AS Total_Amt,CASE WHEN (SELECT NAME FROM broker_master WHERE broker_id=sales_credit_note_broker_dtls.brokercode AND modified_type='INSERTED') IS NULL THEN 'NA' ELSE (SELECT NAME FROM broker_master WHERE broker_id=sales_credit_note_broker_dtls.brokercode AND modified_type='INSERTED') END  AS Broker_Name,CASE WHEN (SELECT vehicle_no FROM vehicle_master WHERE vehicle_id=sales_credit_note_trans_dtls.vehicleno AND modified_type='INSERTED') IS NULL THEN 'NA' ELSE (SELECT vehicle_no FROM vehicle_master WHERE vehicle_id=sales_credit_note_trans_dtls.vehicleno AND modified_type='INSERTED') END  AS Vehicle_No,sales_credit_note.creditnotetype AS Sales_Return_Type FROM sales_credit_note INNER JOIN sales_credit_note_broker_dtls ON sales_credit_note.creditnoteid = sales_credit_note_broker_dtls.creditnoteid INNER JOIN sales_credit_note_trans_dtls ON sales_credit_note_broker_dtls.creditnoteid = sales_credit_note_trans_dtls.creditnoteid INNER JOIN sales_credit_note_item_dtls ON sales_credit_note_trans_dtls.creditnoteid = sales_credit_note_item_dtls.creditnoteid INNER JOIN sales_credit_note_tax_info ON sales_credit_note_item_dtls.creditnoteid = sales_credit_note_tax_info.creditnoteid WHERE sales_credit_note.creditnotedate>=:fromdate AND sales_credit_note.creditnotedate<=:todate GROUP BY sales_credit_note_item_dtls.item_name,sales_credit_note.creditnoteid",nativeQuery=true)
	List<Map<String,Object>>creditnoteReport(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	//@Query(value="SELECT itemname,packingname,itemcode,packingcode,IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0) AS opening_qty,IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0) AS opening_pck_qty,IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_mat_wt, IFNULL(pur_pck_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_pack_qty,IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0) AS pro_mat_wt, IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0) AS pro_pack_qty,(IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0)-IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0)) AS closing_mat_wt, (IFNULL(pur_pck_qty (itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0)-IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0)) AS closing_pack_qty FROM itemlist WHERE item_type='RAW MATERIALS'",nativeQuery=true)
	//List<Tuple>getstocktrackingReport(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT * FROM (SELECT itemname,packingname,itemcode,packingcode,IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0) AS opening_pck_qty,IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0) AS opening_qty,IFNULL(pur_pck_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_pack_qty,IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_mat_wt, IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0) AS pro_pack_qty,IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0) AS pro_mat_wt, (IFNULL(pur_pck_qty (itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0)-IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0)) AS closing_pack_qty,(IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0)-IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0)) AS closing_mat_wt FROM itemlist WHERE item_type='RAW MATERIALS') a WHERE (a.opening_qty!='0.000' OR a.opening_pck_qty!='0' OR a.rcv_mat_wt!='0.000' OR a.rcv_pack_qty!='0' OR a.pro_mat_wt!='0.000' OR a.pro_pack_qty!='0')",nativeQuery=true)
	List<Tuple>getstocktrackingReport(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT * FROM (SELECT itemname,packingname,itemcode,packingcode,IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0) AS opening_pck_qty,IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0) AS opening_qty,IFNULL(pur_pck_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_pack_qty,IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_mat_wt, IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0) AS pro_pack_qty,IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0) AS pro_mat_wt, (IFNULL(pur_pck_qty (itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_pck(itemname,packingname,:fromdate),0)-IFNULL(pro_pck_qty (itemname,packingname,:fromdate,:todate),0)) AS closing_pack_qty,(IFNULL(pur_item_qty(itemname,packingname,:fromdate,:todate),0)+IFNULL(pur_opening_qty(itemname,packingname,:fromdate),0)-IFNULL(pro_item_qty(itemname,packingname,:fromdate,:todate),0)) AS closing_mat_wt FROM itemlistpacking WHERE (item_type='PACKING ITEMS' OR item_type LIKE '%CWIP%')) a WHERE (a.opening_qty!='0.000' OR a.opening_pck_qty!='0' OR a.rcv_mat_wt!='0.000' OR a.rcv_pack_qty!='0' OR a.pro_mat_wt!='0.000' OR a.pro_pack_qty!='0')",nativeQuery=true)
	List<Tuple>getstocktrackingReportpackingitem(@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	
	
	@Query(value="SELECT * FROM (SELECT itemname,packingname,itemcode,packingcode,IFNULL(proout_opening_qty(itemname,packingname,:fromdate),0) AS opening_qty,IFNULL(proout_opening_pck(itemname,packingname,:fromdate),0) AS opening_pck_qty,IFNULL(proout_item_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_mat_wt, IFNULL(proout_pck_qty(itemname,packingname,:fromdate,:todate),0) AS rcv_pack_qty,IFNULL(sale_item_qty(itemname,packingname,:fromdate,:todate),0) AS pro_mat_wt, IFNULL(sale_pck_qty (itemname,packingname,:fromdate,:todate),0) AS pro_pack_qty,(IFNULL(proout_item_qty(itemname,packingname,:fromdate,:todate),0)+IFNULL(proout_opening_qty(itemname,packingname,:fromdate),0)-IFNULL(sale_item_qty(itemname,packingname,:fromdate,:todate),0)) AS closing_mat_wt, (IFNULL(proout_pck_qty (itemname,packingname,:fromdate,:todate),0)+IFNULL(proout_opening_pck(itemname,packingname,:fromdate),0)-IFNULL(sale_pck_qty (itemname,packingname,:fromdate,:todate),0)) AS closing_pack_qty FROM itemlist WHERE item_type='FINISHED PRODUCTS') a WHERE (a.opening_qty!='0.000' OR a.opening_pck_qty!='0' OR a.rcv_mat_wt!='0.000' OR a.rcv_pack_qty!='0' OR a.pro_mat_wt!='0.000' OR a.pro_pack_qty!='0')",nativeQuery=true)
	List<Tuple>getstocktrackingReportfinshed(@Param("fromdate") String fromdate,@Param("todate") String todate);
		
	@Query(value="{call stocktrackingReport(:#{#startdate},:#{#fromdate},:#{#todate},:#{#catagory})}",nativeQuery=true)
	List<Map<String,Object>> getstocktrackingReport2(@Param("startdate") String startdate,@Param("fromdate") String fromdate,@Param("todate") String todate,@Param("catagory") String catagory);
	
	@Query(value="SELECT p.id AS id,p.grn_date AS d_ate,p.grn_no AS voucherid,p.grn_id AS voucherref,'GRN' AS vouchertype,(CASE WHEN  SUM(i.rcv_mat_wt) IS NULL THEN '0.000' ELSE SUM(i.rcv_mat_wt) END) AS inwardqty,(CASE WHEN  SUM(i.rcv_pack_qty) IS NULL THEN '0' ELSE SUM(i.rcv_pack_qty) END) AS inwardpack,'0.000' AS outwardqty,'0' AS outwardpck FROM pur_good_receipt p,pur_good_receipt_item_details i WHERE p.modified_type='INSERTED' AND p.grn_id=i.grn_id AND p.modified_type=i.modified_type AND p.grn_date <=:todate AND p.grn_date>=:fromdate AND i.adv_item_code=:itemcode AND i.adv_packing=:packingcode GROUP BY p.grn_id",nativeQuery=true)
	List<Map<String,Object>>allgrnreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT p.id AS id,p.prod_trans_date AS d_ate,p.prod_trans_code AS voucherid,p.prod_trans_id AS voucherref,'PRODUCTION' AS vouchertype,'0.000' AS inwardqty,'0' AS inwardpack,(CASE WHEN  SUM(d.production_qty) IS NULL THEN '0.000' ELSE SUM(d.production_qty) END) AS outwardqty,(CASE WHEN  SUM(d.packing_qty) IS NULL THEN '0' ELSE SUM(d.packing_qty) END) AS outwardpck FROM production_transaction_input_details d,production_transaction p WHERE d.item=:itemcode AND d.packing =:packingcode AND d.modified_type='INSERTED' AND d.prod_trans_id = p.prod_trans_id AND d.modified_type=p.modified_type AND p.prod_trans_date>=:fromdate AND p.prod_trans_date<=:todate  GROUP BY d.prod_trans_id",nativeQuery=true)
	List<Map<String,Object>>allprodreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT p.id AS id,p.challan_date AS d_ate,p.challan_no AS voucherid,p.delivery_cid AS voucherref,'CHALLAN' AS vouchertype,(CASE WHEN  SUM(i.mat_wt) IS NULL THEN '0.000' ELSE SUM(i.mat_wt) END) AS outwardqty,(CASE WHEN  SUM(i.squantity) IS NULL THEN '0' ELSE SUM(i.squantity) END) AS outwardpck,'0.000' AS inwardqty,'0' AS inwardpack FROM delivery_challan p,delivery_challan_item_dtls i WHERE p.modified_type='INSERTED' AND p.delivery_cid=i.delivery_cid AND p.modified_type=i.modified_type AND p.challan_date <=:todate AND p.challan_date>=:fromdate AND i.item_code=:itemcode  AND i.packing=:packingcode GROUP BY p.delivery_cid",nativeQuery=true)
	List<Map<String,Object>>allchallanreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT p.id AS id,p.prod_trans_date AS d_ate,p.prod_trans_code AS voucherid,p.prod_trans_id AS voucherref,'PRODUCTION' AS vouchertype,'0.000' AS outwardqty,'0' AS outwardpck,(CASE WHEN  SUM(d.production_qty) IS NULL THEN '0.000' ELSE SUM(d.production_qty) END) AS inwardqty,(CASE WHEN  SUM(d.packing_qty) IS NULL THEN '0' ELSE SUM(d.packing_qty) END) AS inwardpack FROM production_transaction_output_details d,production_transaction p WHERE d.item=:itemcode AND d.packing =:packingcode AND d.modified_type='INSERTED' AND d.prod_trans_id = p.prod_trans_id AND d.modified_type=p.modified_type AND p.prod_trans_date>=:fromdate AND p.prod_trans_date<=:todate  GROUP BY d.prod_trans_id",nativeQuery=true)
	List<Map<String,Object>>allprodoutreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT p.id AS id,p.salesreturnnotedate AS d_ate,p.salesreturnnoteno AS voucherid,p.salesreturnnoteid AS voucherref,'SALER' AS vouchertype,(CASE WHEN  SUM(i.matwt) IS NULL THEN '0.000' ELSE SUM(i.matwt) END) AS inwardqty,(CASE WHEN  SUM(i.squantity) IS NULL THEN '0' ELSE SUM(i.squantity) END) AS inwardpack,'0.000' AS outwardqty,'0' AS outwardpck FROM sales_return_note p,sales_return_note_item_dtls i WHERE p.modified_type='INSERTED' AND p.salesreturnnoteid=i.salesreturnnoteid AND p.modified_type=i.modified_type AND  p.salesreturnnotedate>=:fromdate AND p.salesreturnnotedate <=:todate AND i.itemcode=:itemcode  AND i.packing=:packingcode GROUP BY p.salesreturnnoteid",nativeQuery=true)
	List<Map<String,Object>>allSALESRreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT p.id AS id,p.prod_trans_date AS d_ate,p.prod_trans_code AS voucherid,p.prod_trans_id AS voucherref,'PRODUCTION SPECIAL' AS vouchertype,'0.000' AS outwardqty,'0' AS outwardpck,(CASE WHEN  SUM(d.production_qty) IS NULL THEN '0.000' ELSE SUM(d.production_qty) END) AS inwardqty,(CASE WHEN  SUM(d.packing_qty) IS NULL THEN '0' ELSE SUM(d.packing_qty) END) AS inwardpack FROM production_transaction_spl_output_details d,production_transaction_spl p WHERE d.item=:itemcode AND d.packing =:packingcode AND d.modified_type='INSERTED' AND d.prod_trans_id = p.prod_trans_id AND d.modified_type=p.modified_type AND p.prod_trans_date>=:fromdate AND p.prod_trans_date<=:todate  GROUP BY d.prod_trans_id",nativeQuery=true)
	List<Map<String,Object>>allproductionspecialoutputRreports(@Param("itemcode") String itemcode,@Param("packingcode") String packingcode,@Param("fromdate") String fromdate,@Param("todate") String todate);
	
	@Query(value="SELECT * FROM pur_bill WHERE modified_type='INSERTED' AND referance_id=:grnid ", nativeQuery=true)
	List<Map<String,Object>> getBillThroughGRNId(@Param("grnid") String grnid);
	
	@Query(value="SELECT SUM(d.gross_amt) AS totalamount FROM pur_good_receipt g,pur_good_receipt_item_details d WHERE g.modified_type='INSERTED' AND g.modified_type=d.modified_type AND g.grn_id=d.grn_id AND g.supplier_name =:suppid AND g.fin_year=:financial_year " ,nativeQuery=true)
	Map<String,Object> getSuppliertdsStatDtls(@Param("suppid") String suppid,@Param("financial_year") String financial_year);
	
	@Query(value="SELECT \r\n"
			+ "(SELECT COUNT(item_code)*15 FROM wm_unload_advice_item_dtls WHERE unadviceid=mainqc.unadviceid AND modified_type='INSERTED') AS countrow,\r\n"
			+ "IF(IF(@ul_date = mainqc.unadviceid,'',@ul_date \\:= mainqc.unadviceid)!='',mainqc.ula_date,'') AS ula_date ,\r\n"
			+ "IF(IF(@wgt_date = mainqc.unadviceid,'',@wgt_date \\:= mainqc.unadviceid)!='',mainqc.tw_date,'') AS wgt_date,\r\n"
			+ "IF(IF(@qc_date = mainqc.unadviceid,'',@qc_date \\:= mainqc.unadviceid)!='',mainqc.qc_date,'') AS qc_date,\r\n"
			+ "IF(IF(@vch = mainqc.unadviceid,'',@vch \\:= mainqc.unadviceid)!='',mainqc.vehicle_name,'') AS vch,\r\n"
			+ "IF(IF(@item = mainqc.unadviceid,'',@item \\:= mainqc.unadviceid)!='',@item1\\:=mainqc.adv_item_name,IF(@item1 = mainqc.adv_item_name,'',@item1 \\:= mainqc.adv_item_name)) AS adv_item_name,\r\n"
			+ "IF(IF(@mat_wt = mainqc.unadviceid,'',@mat_wt \\:= mainqc.unadviceid)!='',@mat_wt1\\:=mainqc.pssd_mat_wt,IF(@mat_wt1 = mainqc.pssd_mat_wt,'',@mat_wt1 \\:= mainqc.pssd_mat_wt)) AS pssd_mat_wt,\r\n"
			+ "CASE WHEN mainqc.qc_param='MOISTURE' THEN 'MOIS.'\r\n"
			+ "WHEN mainqc.qc_param='HLW' THEN 'HLW'\r\n"
			+ "WHEN mainqc.qc_param='SV IN ML' THEN 'SV'\r\n"
			+ "WHEN mainqc.qc_param='INFESATION' THEN 'INFES.'\r\n"
			+ "WHEN (mainqc.qc_param='WEIGHT GLUTEN' OR mainqc.qc_param='WET GLUTEN') THEN 'WET GLU.' \r\n"
			+ "WHEN mainqc.qc_param='ODOUR' THEN 'ODR.'\r\n"
			+ "WHEN mainqc.qc_param='BROKEN & SHIRVILLED' THEN 'B&SI.'\r\n"
			+ "WHEN mainqc.qc_param='TOTAL IMPURITES' THEN 'T. IMP.' \r\n"
			+ "ELSE mainqc.qc_param END AS qc_param,\r\n"
			+ "mainqc.MIN,mainqc.MAX,mainqc.perip,mainqc.prep_out,mainqc.MASTER,mainqc.master_out,mainqc.rmks,\r\n"
			+ "mainqc.adv_item_code,mainqc.unadviceid\r\n"
			+ "FROM \r\n"
			+ "(SELECT n.ula_date,n.unadviceno,n.unadviceid,wgt.tw_date,m.qc_date,m.vehicle_name,m.quality_check_id,m.referenceid,p.grn_id,q.adv_item_code,q.adv_item_name,q.pssd_mat_wt, \r\n"
			+ "qcd.qc_param,qcd.MIN,qcd.MAX,qcd.observation AS perip,IF(qcd.observation='','',IF(qcd.observation BETWEEN qcd.MIN AND qcd.MAX,'No','Yes')) AS prep_out,qcd.sample,qcd.out_qc_param,qcd.master_observation AS MASTER,\r\n"
			+ "IF(qcd.master_observation='','',IF(qcd.master_observation='OK','No',IF(qcd.master_observation BETWEEN qcd.MIN AND qcd.MAX,'No','Yes'))) AS master_out,\r\n"
			+ "IF(qcd.out_qc_param='NA' OR qcd.out_qc_param='' OR qcd.out_qc_param IS NULL,qcd.qc_remarks,IF(qcd.qc_remarks='NA' OR qcd.qc_remarks='' OR qcd.qc_remarks IS NULL,qcd.out_qc_param,CONCAT(qcd.qc_remarks,', ',qcd.out_qc_param))) AS rmks,\r\n"
			+ "qcd.qc_remarks FROM\r\n"
			+ "(SELECT pqc.qc_date,pqc.quality_check_id,pqc.referenceid,pqc.vehicle_name FROM pur_quality_check pqc WHERE pqc.modified_type='INSERTED' AND COALESCE(quality_check_id, '') != '' AND pqc.referenceid!='NA')m\r\n"
			+ "LEFT JOIN (SELECT ula_date,unadviceno,unadviceid FROM wm_unload_advice WHERE modified_type='INSERTED')n ON (m.referenceid=n.unadviceid)\r\n"
			+ "LEFT JOIN(SELECT wg.advice,wg.tw_date FROM wm_unload_wgmnt wg WHERE wg.modified_type='INSERTED' AND wg.weight2='weight2') wgt ON (wgt.advice=m.referenceid)\r\n"
			+ "LEFT JOIN (SELECT supplier,referance_id,grn_date,grn_id FROM pur_good_receipt WHERE modified_type='INSERTED')p ON(p.referance_id= m.referenceid)\r\n"
			+ "LEFT JOIN (SELECT grn_id,adv_item_code,adv_item_name,pssd_mat_wt FROM pur_good_receipt_item_details WHERE modified_type='INSERTED' GROUP BY grn_id,adv_item_code ORDER BY grn_id)q ON(q.grn_id=p.grn_id)\r\n"
			+ "LEFT JOIN (SELECT quality_check_id,item_code,qc_param,cal_basis,basis_amt_uom,MIN,MAX,sample,observation,out_qc_param,master_observation,qc_remarks FROM pur_quality_check_details_qc_details WHERE modified_type='INSERTED') \r\n"
			+ "qcd ON (qcd.quality_check_id=m.quality_check_id AND qcd.item_code=q.adv_item_code)) mainqc\r\n"
			+ "WHERE mainqc.tw_date BETWEEN :fromdate AND :todate AND COALESCE(mainqc.adv_item_code, '') != ''\r\n"
			+ "ORDER BY mainqc.ula_date,mainqc.unadviceid,mainqc.adv_item_code,\r\n"
			+ "CASE WHEN mainqc.qc_param='MOISTURE' THEN 1 \r\n"
			+ "WHEN mainqc.qc_param='HLW' THEN 2\r\n"
			+ "WHEN mainqc.qc_param='SV IN ML' THEN 3\r\n"
			+ "WHEN mainqc.qc_param='INFESATION' THEN 4\r\n"
			+ "WHEN mainqc.qc_param='WEIGHT GLUTEN' THEN 5 ELSE 6 END",nativeQuery = true)
	List<Map<String, Object>> getWhQCReport(@Param("fromdate") String fromdate, @Param("todate") String todate);
	
	@Query(value="SELECT \r\n"
			+ "(SELECT COUNT(item_code)*15 FROM wm_unload_advice_item_dtls WHERE unadviceid=mainqc.unadviceid AND modified_type='INSERTED') AS countrow,\r\n"
			+ "IF(IF(@ul_date = mainqc.unadviceid,'',@ul_date \\:= mainqc.unadviceid)!='',mainqc.ula_date,'') AS ula_date ,\r\n"
			+ "IF(IF(@wgt_date = mainqc.unadviceid,'',@wgt_date \\:= mainqc.unadviceid)!='',mainqc.tw_date,'') AS wgt_date,\r\n"
			+ "IF(IF(@qc_date = mainqc.unadviceid,'',@qc_date \\:= mainqc.unadviceid)!='',mainqc.qc_date,'') AS qc_date,\r\n"
			+ "IF(IF(@vch = mainqc.unadviceid,'',@vch \\:= mainqc.unadviceid)!='',mainqc.vehicle_name,'') AS vch,\r\n"
			+ "IF(IF(@item = mainqc.unadviceid,'',@item \\:= mainqc.unadviceid)!='',@item1\\:=mainqc.item_name,IF(@item1 = mainqc.item_name,'',@item1 \\:= mainqc.item_name)) AS adv_item_name,\r\n"
			+ "IF(IF(@mat_wt = mainqc.unadviceid,'',@mat_wt \\:= mainqc.unadviceid)!='',@mat_wt1\\:=mainqc.mat_wt,IF(@mat_wt1 = mainqc.mat_wt,'',@mat_wt1 \\:= mainqc.mat_wt)) AS pssd_mat_wt,\r\n"
			+ "CASE WHEN mainqc.qc_param='MOISTURE' THEN 'MOIS.'\r\n"
			+ "WHEN mainqc.qc_param='HLW' THEN 'HLW'\r\n"
			+ "WHEN mainqc.qc_param='SV IN ML' THEN 'SV'\r\n"
			+ "WHEN mainqc.qc_param='INFESATION' THEN 'INFES.'\r\n"
			+ "WHEN (mainqc.qc_param='WEIGHT GLUTEN' OR mainqc.qc_param='WET GLUTEN') THEN 'WET GLU.' \r\n"
			+ "WHEN mainqc.qc_param='ODOUR' THEN 'ODR.'\r\n"
			+ "WHEN mainqc.qc_param='BROKEN & SHIRVILLED' THEN 'B&SI.'\r\n"
			+ "WHEN mainqc.qc_param='TOTAL IMPURITES' THEN 'T. IMP.' \r\n"
			+ "ELSE mainqc.qc_param END AS qc_param,\r\n"
			+ "mainqc.MIN,mainqc.MAX,mainqc.perip,mainqc.prep_out,mainqc.MASTER,mainqc.master_out,mainqc.rmks,\r\n"
			+ "mainqc.item_code,mainqc.unadviceid\r\n"
			+ "FROM \r\n"
			+ "(SELECT n.ula_date,n.unadviceno,n.unadviceid,wgt.tw_date,m.qc_date,m.vehicle_name,m.quality_check_id,m.referenceid,q.item_code,q.item_name,q.mat_wt, \r\n"
			+ "qcd.qc_param,qcd.MIN,qcd.MAX,qcd.observation AS perip,IF(qcd.observation='','',IF(qcd.observation BETWEEN qcd.MIN AND qcd.MAX,'No','Yes')) AS prep_out,qcd.sample,qcd.out_qc_param,qcd.master_observation AS MASTER,\r\n"
			+ "IF(qcd.master_observation='','',IF(qcd.master_observation='OK','No',IF(qcd.master_observation BETWEEN qcd.MIN AND qcd.MAX,'No','Yes'))) AS master_out,\r\n"
			+ "IF(qcd.out_qc_param='NA' OR qcd.out_qc_param='' OR qcd.out_qc_param IS NULL,qcd.qc_remarks,IF(qcd.qc_remarks='NA' OR qcd.qc_remarks='' OR qcd.qc_remarks IS NULL,qcd.out_qc_param,CONCAT(qcd.qc_remarks,', ',qcd.out_qc_param))) AS rmks,\r\n"
			+ "qcd.qc_remarks FROM\r\n"
			+ "(SELECT pqc.qc_date,pqc.quality_check_id,pqc.referenceid,pqc.vehicle_name FROM pur_quality_check pqc WHERE pqc.modified_type='INSERTED' AND COALESCE(quality_check_id, '') != '' AND pqc.referenceid!='NA')m\r\n"
			+ "LEFT JOIN (SELECT ula_date,unadviceno,unadviceid,supp_name FROM wm_unload_advice WHERE modified_type='INSERTED')n ON (m.referenceid=n.unadviceid)\r\n"
			+ "LEFT JOIN(SELECT wg.advice,wg.tw_date FROM wm_unload_wgmnt wg WHERE wg.modified_type='INSERTED' AND wg.weight2='weight2') wgt ON (wgt.advice=m.referenceid)\r\n"
			+ "LEFT JOIN (SELECT unadviceid,item_code,item_name,mat_wt FROM wm_unload_advice_item_dtls WHERE modified_type='INSERTED' GROUP BY unadviceid,item_code ORDER BY unadviceid)q ON(q.unadviceid=n.unadviceid)\r\n"
			+ "LEFT JOIN (SELECT quality_check_id,item_code,qc_param,cal_basis,basis_amt_uom,MIN,MAX,sample,observation,out_qc_param,master_observation,qc_remarks FROM pur_quality_check_details_qc_details WHERE modified_type='INSERTED') \r\n"
			+ "qcd ON (qcd.quality_check_id=m.quality_check_id AND qcd.item_code=q.item_code)) mainqc\r\n"
			+ "WHERE mainqc.tw_date BETWEEN :fromdate AND :todate AND COALESCE(mainqc.item_code, '') != ''\r\n"
			+ "ORDER BY mainqc.ula_date,mainqc.unadviceid,mainqc.item_code,\r\n"
			+ "CASE WHEN mainqc.qc_param='MOISTURE' THEN 1 \r\n"
			+ "WHEN mainqc.qc_param='HLW' THEN 2\r\n"
			+ "WHEN mainqc.qc_param='SV IN ML' THEN 3\r\n"
			+ "WHEN mainqc.qc_param='INFESATION' THEN 4\r\n"
			+ "WHEN mainqc.qc_param='WEIGHT GLUTEN' THEN 5 ELSE 6 END",nativeQuery = true)
	List<Map<String, Object>> getWhQCReportUnloadAdvice(@Param("fromdate") String fromdate, @Param("todate") String todate);
	
	@Query(value="SELECT m.tw_date AS unload_date,q.qc_date AS qc_date,w.vehicle_no AS vehicle,i.item_name AS item,i.mat_wt AS mat_weight,\r\n"
			+ "q.MOIS,q.HLW,q.INFES,q.ODOUR,q.STONE,q.POTIA,q.KB\r\n"
			+ "FROM peripheral_qc q LEFT JOIN wm_unload_advice w ON q.unloadid=w.unadviceid \r\n"
			+ "LEFT JOIN wm_unload_advice_item_dtls i ON q.unloadid=i.unadviceid \r\n"
			+ "LEFT JOIN wm_unload_wgmnt m ON q.unloadid=m.`advice`\r\n"
			+ "WHERE w.`modified_type`='INSERTED' AND i.`modified_type`='INSERTED' \r\n"
			+ "AND m.`modified_type`='INSERTED'  AND m.tw_date BETWEEN :fromdate AND :todate GROUP BY w.unadviceid",nativeQuery = true)
	List<Map<String, Object>> getWhPeriQCReport(@Param("fromdate") String fromdate, @Param("todate") String todate);
}
